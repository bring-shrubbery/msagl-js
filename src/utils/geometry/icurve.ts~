class PlaneTransformation {}

/// <summary>
/// The interface for curves: instances of ICurve inside of GLEE
/// are BSpline,Curve,LineSeg, Ellipse,CubicBezierSeg and ArrowTipCurve.
/// </summary>
export interface ICurve {
    /// Returns the point on the curve corresponding to parameter t
    value(t:number):number;
    /// first derivative at t
    Point Derivative(number t);
    /// second derivative
    Point SecondDerivative(number t);
    /// third derivative
    Point ThirdDerivative(number t);

    /// A tree of ParallelogramNodes covering the curve. 
    /// This tree is used in curve intersections routines.
    /// <value></value>
    ParallelogramNodeOverICurve ParallelogramNodeOverICurve { get; }

    /// XY bounding box of the curve
    Rectangle BoundingBox { get;}

    /// the start of the parameter domain
    number ParStart { get;}

    /// the end of the parameter domain
    number ParEnd { get;}

    /// Returns the trim curve between start and end, without wrap
    ICurve Trim(number start, number end);

    /// Returns the trim curve between start and end, with wrap, if supported by the implementing class.
    ICurve TrimWithWrap(number start, number end);

    /// Moves the curve by the delta.
    void Translate(Point delta);

    /// Returns the curved with all points scaled from the original by x and y
    ICurve ScaleFromOrigin(number xScale, number yScale);

    /// this[ParStart]
    Point Start { get;}

    /// this[ParEnd]
    Point End { get; }

    /// this[Reverse[t]]=this[ParEnd+ParStart-t]
    ICurve Reverse();



    /// Offsets the curve in the direction of dir
    ICurve OffsetCurve(number offset, Point dir);

    /// return length of the curve segment [start,end] 
    number LengthPartial(number start, number end);

    /// Get the length of the curve
    number Length { get;}



    number GetParameterAtLength(number length);

    /// Return the transformed curve
    ICurve Transform(PlaneTransformation transformation);

    
    /// and t belongs to the closed segment [low,high]
    number ClosestParameterWithinBounds(Point targetPoint, number low, number high);
    
    number ClosestParameter(Point targetPoint);
    /// clones the curve. 
    ICurve Clone();


    /// The left derivative at t. 
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "t")]
    Point LeftDerivative(number t);


    /// the right derivative at t
    Point RightDerivative(number t);

    
    /// the signed curvature of the segment at t
    number Curvature(number t);
    /// the derivative of the curvature at t
    number CurvatureDerivative(number t);


    /// the derivative of CurvatureDerivative
    number CurvatureSecondDerivative(number t);


}
